buildscript {
    rootProject.version = '0.8.0-SNAPSHOT'
    rootProject.group = 'ch.tutteli.atrium'

    def translationProjects = subprojects.findAll { it.projectDir.path.contains("translations") }
    ext {
        // main
        kbox_version = '0.10.0'
        kbox = { "ch.tutteli.kbox:kbox:$kbox_version" }
        kotlin_version = '1.2.61'
        mockito_kotlin_version = '1.5.0'
        mockito = { "com.nhaarman:mockito-kotlin:$mockito_kotlin_version" }

        // test
        jacoco_tool_version = '0.8.2'
        junit_platform_version = '1.2.0'
        spek_version = '1.1.5'

        //gh-pages.gradle
        docProjects = subprojects.findAll { !it.name.contains("robstoll") && it.name != "${rootProject.name}-spec"}
        ghPages_version = rootProject.version
        dokka_sourceMapping = 'tree/master'
        srcKotlin = 'src/main/kotlin'
        github_url = "https://github.com/robstoll/${rootProject.name}"

        //jacoco-multi-project.gradle
        def deprecatedProjects = subprojects.findAll { it.name.endsWith("-deprecated") }
        jacocoMulti = [
            sourceProjects:
                (subprojects - deprecatedProjects).findAll {
                    // would have two classes with the same name if we add it as project as well,
                    // (clashes with "${project.name}-translations-en_GB-jvm"
                    it.name != "${rootProject.name}-translations-de_CH-jvm" &&
                        // does not make sense to listen specs in coverage
                        it.name != "${rootProject.name}-spec"
                },
            jacocoProjects:
                (subprojects - deprecatedProjects - translationProjects).findAll {
                    !it.name.endsWith("-common") &&
                    !it.name.endsWith("-js") &&
                        it.name != "${rootProject.name}-domain-api-jvm" &&
                        it.name != "${rootProject.name}-domain-robstoll-jvm" &&
                        it.name != "${rootProject.name}-core-robstoll-jvm" &&
                        it.name != "${rootProject.name}-spec" &&
                        it.name != "${rootProject.name}-bc-test" &&
                        //TODO remove with 1.0.0
                        it.name != "${rootProject.name}-assertions" &&
                        it.name != "${rootProject.name}-core-api-deprecated" &&
                        it.name != "${rootProject.name}-core-robstoll-deprecated" &&
                        it.name != "${rootProject.name}-domain-api-deprecated" &&
                        it.name != "${rootProject.name}-translations-de_CH-deprecated" &&
                        it.name != "${rootProject.name}-translations-en_UK-deprecated"
                }
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "ch.tutteli:tutteli-gradle-project-utils:$gradle.ext.tutteli_plugins_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("ch.tutteli:tutteli-gradle-dokka:$gradle.ext.tutteli_plugins_version")
        classpath("ch.tutteli:tutteli-gradle-kotlin-utils:$gradle.ext.tutteli_plugins_version")
        classpath("ch.tutteli:tutteli-gradle-publish:$gradle.ext.tutteli_plugins_version")
        classpath("ch.tutteli:tutteli-gradle-spek:$gradle.ext.tutteli_plugins_version")
    }
}

apply plugin: "ch.tutteli.project.utils"
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/robstoll/tutteli-jars" }
    }
}

def commonProjects = getCommonProjects()
def jsProjects =  getJsProjects()
def jvmProjects =  getJvmProjects()

configureCommonProjects()
configureJsProjects()
configureJvmProjects()

configure(subprojects - commonProjects - jsProjects)  { subproject ->

    apply plugin: 'kotlin'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    apply plugin: 'ch.tutteli.dokka'
}

def apiProjects = subprojects.findAll { it.name.startsWith("${rootProject.name}-api") }
configure(apiProjects)  { subproject ->
    task('testJar', type: Jar) {
        from sourceSets.test.output
        classifier = 'tests'
    }

    task('testSourcesJar', type: Jar) {
        from sourceSets.test.allSource
        classifier = 'testsources'
    }
}

// has to be after the above two blocks which define `it.ext.publish_artifacts`
def bundleSmokeTests = subprojects.findAll{ it.name.endsWith('smoke-test')}
configure(subprojects - bundleSmokeTests) { subproject ->
    apply plugin: 'ch.tutteli.publish'
}

configure(subprojects - jacocoMulti.jacocoProjects - commonProjects - jvmProjects - jsProjects) {
    dependencies {
        compile kotlinStdlib()
        compile kotlinReflect()
    }
}
configure(jacocoMulti.jacocoProjects) {

    apply plugin: 'ch.tutteli.spek'

    dependencies {
        testCompile mockito(), excludeKotlin
    }

    afterEvaluate { subproject ->
        junitjacoco {

            jacoco {
                toolVersion = jacoco_tool_version
            }

            jacocoReport {
                if (project.hasProperty('jacoco_additional')) {
                    project.jacoco_additional.each {
                        sourceDirectories += it.sourceSets.main.allJava.sourceDirectories
                        classDirectories += it.sourceSets.main.output.classesDirs
                    }
                }
                reports {
                    html.enabled = true
                }
            }
        }
    }
}

apply from: 'gradle/scripts/gh-pages.gradle'

if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
    subprojects {
        def srcModule = "src/module"
        def moduleInfo = file("${project.projectDir}/$srcModule/module-info.java")
        if (moduleInfo.exists()) {

            sourceSets {
                module {
                    java {
                        srcDirs = [srcModule]
                        compileClasspath = main.compileClasspath
                        sourceCompatibility = '9'
                        targetCompatibility = '9'
                    }
                }
                main {
                    kotlin { srcDirs += [srcModule] }
                }
            }

            compileModuleJava.configure {
                dependsOn compileKotlin
                destinationDir = compileKotlin.destinationDir
                doFirst {
                    options.compilerArgs = ['--module-path', classpath.asPath,]
                    classpath = files()
                }
            }
            jar.dependsOn compileModuleJava
        }
    }
}

configure(bundleSmokeTests) {
    def bundleUnderTest = it.name.substring(0, it.name.indexOf('-smoke-test'))
    def bundle = project(":$bundleUnderTest")
    description = "Represents a JDK9 smoke test for $bundleUnderTest"

    sourceCompatibility = '9'
    targetCompatibility = '9'

    ext.jacoco_additional = [bundle]

    sourceSets {
        //we are reusing the source from the bundle, so that we do not have to re-invent the spec
        test { kotlin { srcDirs += ["${bundle.projectDir}/src/test/kotlin"] } }
    }

    dependencies {
        //I don't see how to set up compileTestKotlin with --patch-module, so we have put the module-info.java directly in src/test/kotlin instead
        testCompile bundle
        testCompile prefixedProject('verbs-jvm')
    }
}

/*

Release & deploy a commit
--------------------------------
1. change rootProject.version in build.gradle to X.Y.Z
2. update master:
    a) point to the tag
        1) search for old version and replace with new (gradle, maven and section own assertion verb in README.md)
        2) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        3) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
        4) search for `latest#/doc` and replace with `X.Y.Z/doc` (README.md and differences.md)
        5) Remove the warning in README.md about taking a sneak peak (copy it, well be added afterwards)
    b) Update README -> Use own Assertion Verbs -> link to atriumVerbs if it changed
    c) commit & push (modified build.gradle, README.md and differences.md)
3. update github pages:
    a) gr ghPages
    b) change version number in atrium-gh-pages/latest/index.html
    c) add new version to atrium-gh-pages/README.md
    d) commit & push changes
4. deploy to bintray:
    a) gr clean publishBintray
    b) Log in to bintray, check and publish new jars
5. create release on github
    a) git tag vX.Y.Z
    b) git push origin vX.Y.Z
    c) Log in to github and create release

Prepare next dev cycle
-----------------------
1. change rootProject.version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
   c) search for `X.Y.Z/doc` and replace with `latest#/doc`
4. update README
   a) place the warning about taking a sneak peek back into README
   b) update version in the warning to X.Y.Z and update the link as well
3. commit & push changes

*/
